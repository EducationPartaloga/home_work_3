1)  'number' + 3 + 3   -   'number'- це строка, тому далі йде конкотинація. Результат - ʼnumber33ʼ

2)  null + 3   -   при арифметичному додаванні null перетворюється на нуль, тому результат 3

3)  5 && "qwerty"   -   && - це логічний оператор ʼіʼ, тому оскільки число 5 і строка "qwerty" обидва є true, то повертається останнє обчислене значення - "qwerty"

4)  +'40' + +'2' + "hillel";   -   +ʼ40ʼ та +ʼ2ʼ - перетворюються на числа, отримуємо 42, далі додаємо до строки. Тому відбувається конкотинація. Результат ʼ42hillelʼ

5)  '10' - 5 === 6;   -   зліва від оператора строгої рівності === виконується арифметичне віднімання, тому 10 перетворюється на число. Отримуємо результат 5, порівнюємо з 6, тому результат false.

6)  true + false   -    виконуємо арифметичне додавання. Тру це 1, а фолс 0. Тому відповідь 1.

7)  '4px' - 3   -   виконуємо арифметичне віднімання. Тому намагаємось перетворити ʼ4px' на число і отримуємо результат NaN

8)  '4' - 3   -   виконуємо арифметичне віднімання. Тому намагаємось перетворити '4' на число. Отримуємо 4-3, результат 1

9)  '6' + 3 ** 0;   -   спочатку виконуємо арифметичне зведення в ступінь 3 ** 0, результат 1. Потім дивимось що ʼ6ʼ це строка, тому виконуємо конкотинацію. Результат ʼ61ʼ

10)  12 / '6'   -   виконується арифметичне ділення, тому 6 перетворюється на число, отримуємо результат 2

11)  '10' + (5 === 6);   -   спочатку виконуємо порівняння 5 === 6, отримуємо false, далі дивимось що ʼ10ʼ це строка, тому виконуємо конкотинацію. Результат ʼ10falseʼ

12)  null == ''   -   повернеться false у випадку не строгого порівняння (==), тому що null та порожня строка ʼʼ - це різні типи даних і вони не еквівалентні.

13)  3 ** (9 / 3);    -   спочатку виконуємо дію в дужках, а потім зведення в ступінь. Тому в дужках отримуємо 3 і потім 3 в 3 ступені = 27

14)  !!'false' == !!'true'   -   оператор рівності. Перетворюємо спочатку 'false'  та  'true' на булеві значення. Оскільки це не пусті строки, то отримуємо true і там, і там. Порівнюємо і результат true.

15)  0 || '0' && 1   -   спочатку виконуємо логічне АБО   0 || '0'   , отримуємо '0' оскільки це не пуста строка (яка є true). Потім виконуємо '0' && 1 і оскільки обидва є true, то повертається останнє обчислене значення 1

16)  (+null == false) < 1;   -   спочатку перетворюємо +null на число. Отримуємо 0. Потім 0 == false, це оператор не строгої рівності, оскільки обидва значення false, то результат true. Далі виконуємо арифметичне порівняння true < 1, оскільки true перетворюється на 1, то результат false.

17)  false && true || true    -   виконуємо зліва направо. Спочатку false && true і отримуємо false.Потім логічне ʼАБОʼ  false || true і отримуємо true.

18)  false && (false || true);   -   спочатку виконуємо в дужках (false || true) і результа true, тому що логічне АБО повертає перший true результат. Потім false && true і отримуємо результат false. Тому що повертається перший false результат.

19)  (+null == false) < 1 ** 5;   -   спочатку в дужках +null перетворюється на число нуль, потім 0 == fAlse і отримуємо true. Оскільки 0 перетворюється також на false. Далі одиницю розводимо в 5 ступінь і отримуємо 1. Далі виконуємо арифметичне порівняння, ліва частина true перетворюється на 1. Порівнюємо 1 < 1, результат false